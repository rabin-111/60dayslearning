


# Understanding Prisma

In today's lecture, Harkirat provides an insightful overview of `Prisma`, discussing the role of `Object-Relational Mapping (ORM)` systems and how Prisma serves as a powerful ORM for modern application development. 

The session later explores the use of Prisma with various databases, the functionality of the `Prisma Client`, and culminated in a hands-on demonstration of `creating a first application using Prisma` showcasing its ease of use and versatility in managing database operations.

# ORMs

Object-Relational Mapping (ORM) is a crucial concept in modern software development, particularly when dealing with databases in object-oriented programming languages. Prisma is an ORM that exemplifies the use of this technique. Here's an elaboration on ORMs, with a focus on how Prisma fits into this context:

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/dd624914-6876-4b58-9694-424f7aa5e22a/fb396a8a-5a2f-47e3-8c4c-eb5857b70643/Untitled.png)

### **What are ORMs?**

### **Official Definition**

- **ORM**: Object-Relational Mapping is a programming technique for converting data between incompatible systems using object-oriented programming languages. It creates a "virtual object database" that developers can interact with using their programming language instead of direct database queries.
- **Abstraction**: ORMs abstract the complexities of the database, allowing developers to work with database records as if they were objects in their code. This includes handling CRUD operations (Create, Read, Update, Delete) and managing database connections and transactions.

### **Simplified Definition**

- **Ease of Use**: ORMs simplify database interactions by letting developers use the syntax and paradigms of their programming language rather than writing SQL queries. This can make code more readable and maintainable.

### **Prisma as an ORM**

Prisma is a next-generation ORM that takes the concept of ORMs further by providing additional tools and features that enhance the developer experience:

- **Schema Definition**: Prisma uses a declarative Prisma schema to define the application's data model. This schema is used to generate a Prisma Client that provides type-safe database access.
- **Migrations**: Prisma Migrate allows developers to define and perform database schema migrations in a controlled and versioned manner.
- **Type Safety**: Prisma ensures type safety by generating a client that is tailored to the schema, reducing the risk of runtime errors due to mismatched data types.
- **Query Building**: Prisma Client provides a fluent API for building queries, which can be more intuitive than writing raw SQL, especially for complex queries.
- **Performance**: Prisma is designed to be performant and efficient, with a focus on minimizing the overhead typically associated with ORMs.

> ORMs, including Prisma, offer a high-level abstraction over database interactions, making it easier for developers to work with data in the context of their applications.
> 

# Why ORMs?

Object-Relational Mapping (ORM) frameworks provide a bridge between the object-oriented world of application development and the relational world of databases. They offer several advantages that make them an attractive choice for developers. Let's delve into these benefits with explanations and code snippets to illustrate their impact.

### 1. Simpler Syntax

ORMs allow developers to work with high-level programming constructs instead of writing SQL queries directly. This means you can manipulate database entries using objects and methods in your programming language.

**Without ORM: SQL Query**

```jsx
INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
```

**With ORM: Object Manipulation (Example in JavaScript using Prisma)**

```jsx
await prisma.users.create({
  data: {
    name: 'John Doe',
    email: 'john@example.com',
  },
});
```

### 2. Database Abstraction

ORMs provide a unified API to interact with different databases, making it easier to switch databases if needed without rewriting your data access layer.

**Prisma Example**: The same Prisma client code works across different databases. Switching from PostgreSQL to MySQL, for instance, primarily requires changes in the configuration, not in the code that interacts with the database.

**Prisma Schema for PostgreSQL**

```jsx
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
```

**Prisma Schema for MySQL**

```jsx
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
```

### 3. Type Safety/Auto-completion

Modern ORMs, especially those used in statically typed languages or with TypeScript support, offer type safety and auto-completion, reducing runtime errors and improving developer productivity.

**TypeScript Example with Prisma**: When you query the database, the Prisma client provides auto-completion for table names and columns, and the returned data is automatically typed.

```jsx
// TypeScript understands the structure of the expected result,
// providing auto-completion and type checking
const user = await prisma.user.findUnique({
  where: {
    email: 'john@example.com',
  },
});
```

### 4. Automatic Migrations

ORMs can automate the process of generating and applying database schema migrations, making it easier to evolve your database schema as your application grows.

**Prisma Migration Example**: Prisma Migrate generates SQL migration files for your schema changes, which can be applied to update the database schema.

**Generate Migration**

```bash
npx prisma migrate dev --name add_phone_number
```

This command might generate a SQL file similar to:

```jsx
-- Migration SQL generated by Prisma Migrate
ALTER TABLE "users"
ADD COLUMN "phone_number" VARCHAR(15);
```

**Apply Migration**
Applying migrations is handled by Prisma Migrate when you run the above command, keeping your database schema in sync with your Prisma schema.

# Prisma

Prisma is a next-generation ORM (Object-Relational Mapping) tool for Node.js and TypeScript applications. It simplifies database workflows by providing a robust set of features that enhance developer productivity and code quality. Let's delve into the core components that make Prisma a powerful tool for modern application development.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/dd624914-6876-4b58-9694-424f7aa5e22a/1b691f2a-30cb-466f-b685-147394d18c0b/Untitled.png)

### 1. Data Model

### 1. Data Model

Prisma uses a Prisma Schema file to define the data model of your application. This schema acts as a single source of truth for your database structure, including tables, columns, relationships, and more. The Prisma Schema Language (PSL) is intuitive yet powerful, allowing you to define your database schema in a clear and concise manner.

**Example Prisma Schema**:

```jsx
// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}
```

This schema defines two models, `User` and `Post`, representing tables in the database. It specifies fields for each table, their types, and the relationship between users and posts.

### 2. Automated Migrations

Prisma Migrate is a feature that automatically generates and runs database migrations
