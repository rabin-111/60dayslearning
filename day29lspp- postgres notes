# Understanding Postgres

In today's lecture, Harkirat introduces the PostgreSQL database, beginning with an overview of `different database types` and the limitations of NoSQL databases. The discussion then pivots to the `necessity of SQL databases`, highlighting their advantages in certain scenarios. 

We further look into the process of `creating our first PostgreSQL database`, exploring how to `interact with it and the various operations` that can be executed. This provides a solid foundation for understanding the principles of relational database management systems.

  # **Types of Databases**

Databases are an essential component of many applications, serving as the backbone for data storage and retrieval. There are several types of databases, each designed to serve specific use cases and data management needs. Below is an elaboration on the types of databases:

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/dd624914-6876-4b58-9694-424f7aa5e22a/6dffbd5c-18b6-4592-af2f-98544c80eac0/Untitled.png)

## **NoSQL Databases**

- **Definition**: NoSQL databases are designed to store, retrieve, and manage large volumes of unstructured or semi-structured data. They are known for their flexibility, scalability, and high performance.
- **Schema-less**: Unlike SQL databases, NoSQL databases do not require a predefined schema, allowing for the storage of data in various formats.
- **Use Cases**: Ideal for big data applications, real-time web apps, and for handling large volumes of data that may not fit neatly into a relational model.
- **Examples**: MongoDB, Cassandra, Redis, Couchbase.

            ## **Graph Databases**

- **Definition**: Graph databases are designed to store and navigate relationships. They treat the relationships between data as equally important as the data itself.
- **Data Storage**: Data is stored in nodes (entities) and edges (relationships), which makes them highly efficient for traversing and querying complex relationships.
- **Use Cases**: Particularly useful for social networks, recommendation engines, fraud detection, and any domain where relationships are key.
- **Examples**: Neo4j, Amazon Neptune, OrientDB.

            ## **Vector Databases**

- **Definition**: Vector databases are specialized databases optimized for vector similarity searching. They are used to store and process vector embeddings typically generated by machine learning models.
- **Data Storage**: Data is stored in the form of vectors, which are arrays of numbers that represent data in a high-dimensional space.
- **Use Cases**: Useful in machine learning applications, such as image recognition, natural language processing, and recommendation systems.
- **Examples**: Pinecone, Milvus, Faiss.

            ## **SQL Databases**

- **Definition**: SQL databases, also known as relational databases, store data in predefined schemas and tables with rows and columns.
- **Data Storage**: Data is organized into tables, and each row in a table represents a record with a unique identifier called the primary key.
- **Use Cases**: Most full-stack applications use SQL databases for their ability to maintain ACID (Atomicity, Consistency, Isolation, Durability) properties, ensuring reliable transaction processing.
- **Examples**: MySQL, PostgreSQL, Oracle, SQL Server.

            
            ## **Mongoose and Schema Enforcement**

- **Mongoose Schemas**: Mongoose is an Object Data Modeling (ODM) library for MongoDB that allows developers to define schemas at the application level. It provides a layer of data validation and structure in a Node.js environment.
- **Application-Level Strictness**: While Mongoose enforces schema rules in the application code, it does not impose these constraints at the database level. MongoDB itself remains schemaless.
- **Potential for Erroneous Data**: Even with Mongoose schemas, it's still possible to insert data that doesn't conform to the defined schema directly into the database, bypassing the application's validation logic.

# 
